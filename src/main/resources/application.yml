# Hakoirimusume configuration file
# Relative path is available from Hakoirimusume root directory.

spring.application.name: Hakoirimusume

server:
  port : 8080

spring:
  datasource:
    driver-class-name: org.sqlite.JDBC
    url: jdbc:sqlite:hakoirimusume.db
    username: hakoirimusume
    password: hm35712db7
  sql.init.mode: always
  jpa.database-platform: org.hibernate.community.dialect.SQLiteDialect
  jpa.open-in-view: false

line.bot:
  channel-token: ${LINE_CHANNEL_ACCESS_TOKEN}  # Put your Channel Access Token or ${env_val_name} to specify environment variable.
  channel-secret: ${LINE_CHANNEL_SECRET}  # Put your Channel Secret or ${env_val_name} to specify environment variable.
  handler.path: /callback  # LINE Messaging API Webhook URL will be "{Hakoirimusume server URL}{this value}".

hakoirimusume:
  richmenu:
    for-authorized-user: richmenu-926d8a458c54f8efbca72b268a485a46  # Rich menu ID for authorized user
  sensor-server:
    # Configure sensor component, see also: README.md
    endpoint: http://localhost/get # Endpoint for sensor data & camera image
    camera-endpoint : http://localhost/get?withcamera  # Endpoint for no camera image
  alert:
    to: [ # LINE user / group ID list to send alert
#      "Uxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
#      "Uyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy"
    ]
    polling-interval-sec: 300 # sec. >= 10
    condition:
      # current temperature or humidity >= {these value}  --->  send alert
      temperature: -1  # integer, float or -1 (no temperature condition)
      humidity: -1  # integer, float or -1 (no humidity condition)
    trigger-limit:
      interval: 3 # hours each
      daily-limit: -1 # times, if you'd like to specify -1, no limit will be applied.
    action:
      type: null  # "GET" | "POST" | "COMMAND" | null (no action will be executed)
      # The following placeholders are available in 'target', 'header', 'body'.
      # {{IMAGE_URL} : Imgur URL of image (will be replaced with empty string when camera image is not available)
      # {{TEMP}} : Current temperature (e.g., 25.0)
      # {{HUMID}} : Current humidity (e.g., 50.0)
      # {{PRESSURE}} : Current pressure (e.g., 1013.0)
      # {{DATE}} : yyyymmdd string of alert date (e.g., 20240425)
      # {{TIME}} : HHMMSS string of alert local time (e.g., 113911)
      target: "triggered-script.sh arg1 arg2"  # String, specify URL (when type is "GET" or "POST") or command (when type is "COMMAND")
      header: "POST Header" # null (no header) | String, contents of request header, valid only when type is "POST", this value will be ignored when type is not "POST"
      body: "POST Body"  # String, contents of request body, valid only when type is "POST", this value will be ignored when type is not "POST"
      success-message: "エアコンを点けたよ！"  # This string will be sent to users with alert on success executing action.
      failure-message: "冷房を点けるのに失敗しちゃった😱\n部屋に来て点けてほしいな！🙏"  # This string will be sent to users with alert on failure executing action.
  aikotoba:
    seeds: [ # aikotoba will be "{Random value of 1st list}{Random value of 2nd list}{Random value of 3rd list}..."
      ["お利口で", "かしこくて", "賢くて", "かわいくて", "可愛くて", "キュートで", "げんきで", "元気で", "人見知りで", "優しくて"],
      ["ご機嫌な", "自立した", "よく食べる", "食欲旺盛な", "天才な", "なんでも食べる？", "長寿な", "長生きな", "甘えん坊な", "癒される"],
      ["うさぎ", "ウサギ", "Rabbit", "ラビット", "うさちゃん", "うさぎちゃん", "箱入り娘", "耳の長い家族", "ドワーフ", "お姫さま"]
    ]
    timeout-sec: 60 # sec. After this value seconds, user need to regenerate new aikotoba.
  info.show-private-ip: true
  remote-shutdown:
    enable: true
    available-role: user  # user | admin
    command: "sudo shutdown -h -t 15"
    success-message: "15秒後にシャットダウンするね\nおやすみなさい😴"
    failure-message: "シャットダウンに失敗しちゃった😱\n設置した人にきいてみて！🙏"
  request.timeout-sec: 300  # sec.


# To remove Client wire logs. Please comment out following lines.
# See: https://docs.spring.io/spring-boot/docs/current/reference/html/howto-logging.html
#
#logging.level:
#   com.linecorp.bot.client.wire: INFO